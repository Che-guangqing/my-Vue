{"version":3,"file":"vue.js","sources":["../../src/util/index.js","../../src/observe/array.js","../../src/observe/index.js","../../src/state.js","../../src/compiler/index.js","../../src/init.js","../../src/index.js"],"sourcesContent":["// 当前数据是否是对象\nexport function isObject(data) {\n    return typeof data === 'object' && data !== null\n}\n\n// 定义一个不可枚举但是可读的属性\nexport function def(data,key,value) {\n    Object.defineProperty(data, key, {\n        enumerable:false,   //不可枚举\n        configurable:false, //不能被修改\n        value\n    })\n}","// 需要重写能够改变原数组的方法 push shift unshift pop reverse sort splice\n// slice不会改变原数组不需要劫持\n\n// 先把数组原来的方法保存\nlet oldArraryMethods = Array.prototype\n// arr.__proto__ = arraryMethods 用户使用\n// arraryMethods.__proto__ = oldArraryMethods\n// 使用方法时：原型链查找，先查找重写的，在重写的方法中找不到，会继续向上查找\nexport const arraryMethods = Object.create(oldArraryMethods)\nconst methods = [\n    'push', \n    'shift',\n    'unshift' ,\n    'pop' ,\n    'reverse' ,\n    'sort' ,\n    'splice'\n]\nmethods.forEach(methods => {\n    arraryMethods[methods] = function (...args) {\n        console.log(`调用了${methods}方法`)\n        // 我调用重写的数组方法 这个方法调用原生的数组方法   AOP切片编程\n        // 这里的this，就是谁调用的方法就指向谁，也就是Observe中的value调用的\n        const result = oldArraryMethods[methods].apply(this, args)\n\n        // push unshif方法，添加的元素可能还是对象，要继续监听\n        //当前用户插入的元素\n        let inserted;\n        let ob = this.__ob__\n        // console.log(ob, 'arrrr')\n\n        switch (methods) {\n            case 'push':\n            case 'unshift':\n                inserted = args\n                // arr.push({a:1},{b:2})\n                // inserted = [{a:1},{b:2}]\n                break;\n            case 'splice': //有删除、修改、新增功能 (操作的数组元素,操作的索引,新增的属性) arr.splice(0,1,'b')\n               // 对于splice新增的属性也要看\n                inserted = args.slice(2)\n                break;\n        }\n        // console.log(inserted, '当前用户插入的元素')\n        // 添加了值\n        if(inserted) {\n            // 观测inserted数组\n            // 要使用index.js中循环数组元素监测的方法\n            ob.observeArray(inserted) //将新增属性继续观测\n        } \n\n        return result\n    }\n})","import {isObject, def} from '../util/index'\nimport {arraryMethods} from './array'\n\n// 观测数据\nclass Observe {\n    constructor(value) {\n        // console.log(value)\n        // vue如果数据层次过多 则递归解析对象中的属性 ，依次添加set get方法\n\n        // 给每一个监控过的对象都添加一个__ob__属性，但是这样写会一直递归调用observeArray方法\n        // value.__ob__ = this\n\n        // Object.defineProperty(value, '__ob__', {\n        //     enumerable:false,   //不可枚举\n        //     configurable:false, //不能被修改\n        //     value: this\n        // })\n        def(value,'__ob__',this)\n\n        if(Array.isArray(value)) {\n            // 如果属性是数组,则不使用数组的索引添加get set进行观察、性能不好 \n            // push shift unshift pop reverse sort splice这些方法也能使原数组发生变化\n            // 所以对于这些方法让数组发生变化，也需要知道他变了去通知视图改变，则重写这些方法\n            value.__proto__ = arraryMethods\n            \n            // 如果数组里面是对象[{}]我再进行监测\n            this.observeArray(value)\n        }else {\n            //对对象进行观测\n            this.walk(value)\n        }\n    }\n    //遍历数组\n    observeArray(value) {\n        for(let i = 0 ;i < value.length; i++) {\n            // [{}] 监控了数组里面的对象\n            observe(value[i])\n        }\n    }\n    //遍历对象\n    walk(data) {\n        let keys = Object.keys(data) // [name,age,address]\n        keys.forEach(key => {\n            defineReactive(data, key, data[key])\n        })\n        // for(let i = 0 ;i <keys.length; i++) {\n        //     // 遍历拿到对象中的属性和值 \n        //     let key = keys[i]\n        //     let value =  data[key]\n        //     // 给每个属性定义响应式数据\n        //     defineReactive(data, key, value)\n        // }\n    }\n}\n\n// 定义响应式数据\nfunction defineReactive(data, key, value) {\n    //                (给谁，定义某个key，值是多少)\n    // 递归实现深度监测 如果对象里面还是对象，不递归只能监测一层数据的变化 用observe方法再判断再循环属性添加set get方法\n    observe(value)\n\n    Object.defineProperty(data, key , {\n        //取值\n        get() {\n            return value\n        },\n        //设置值\n        set(newValue) {\n            console.log('更新数据')\n            if (value === newValue) return;\n            // 值发生变化\n\n            // 如果原来的属性是a:{b:1,c:2} 用户这样赋值 a:{a:2}还是监测不到\n            // 继续劫持用户设置的值 因为有可能用户设置的值是对象 对象劫持\n            observe(newValue)\n\n            // console.log('值发生变化')\n            value = newValue\n        }\n    })\n}\n\n\n\n// 响应式原理 观测数据是否变化\n// 把data中的数据都使用 Object.definedProperty()重新定义\nexport function observe(data) {\n    // console.log(data, 'observe')\n    let isObj = isObject(data) //是否对象\n    // console.log(isObj)\n    //不是对象\n    if(!isObj) { return }\n    // 是对象\n    return new Observe(data) //用来观测数据\n}","import {observe} from './observe/index'\nexport function initState(vm) {\n    const opts = vm.$options\n    // vue的数据来源 属性 方法 数据 计算属性 watch\n    if(opts.props) {\n        initProps(vm)\n    }\n    if(opts.methods) {\n        initMethods(vm)\n    }\n    if(opts.data) {\n        initData(vm)\n    }\n    if(opts.computed) {\n        initComputed(vm)\n    }\n    if(opts.watch) {\n        initWatch(vm)\n    }\n}\nfunction initProps() {}\nfunction initMethods() {}\nfunction initData(vm) {\n    // console.log(vm.$options.data)\n    // 数据初始化\n\n    //用户传递的data 可能是对象或函数\n    let data = vm.$options.data;\n    // 如果拿到的值是函数 就执行它 并且this指向vue实例 并且为了让用户拿到data去修改等操作 把data放在vue实例上\n    data = vm._data = typeof data === 'function' ? data.call(vm):data\n    // console.log(data) //对象data\n\n    // 对象劫持  用户改变了数据 我可以收到通知进行刷新页面（数据可以驱动视图变化）\n    // Object. ()  给属性添加get、set方法\n    observe(data) //响应式原理\n}\nfunction initComputed() {}\nfunction initWatch() {}\n","// ast语法树: 用对象来描述编译原生语法\n// 区别于虚拟dom: 用对象来描述dom节点\n// ?:  匹配不捕获\n\n// 把html标签变成ast语法树\nexport function compileToFunction(template) {\n    const attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\n    // console.log(`aaa = '123'`.match(attribute))\n    const ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*'\n    const qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\n    const startTagOpen = new RegExp(`^<${qnameCapture}`)\n    const startTagClose = /^\\s*(\\/?)>/\n    const endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\n    const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g  // {{}}\n\n\n    // const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;    // abc-aa\n    // const qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;  // <aaa:bfsf>\n    // const startTagOpen = new RegExp(`^<${qnameCapture}`);  // 标签开头的正则 捕获的内容是标签名\n    // const endTag = new RegExp(`^\\\\/${qnameCapture}[^>]*>`); // </xxx> 标签结尾\n    // // 匹配属性的\n    // // <div  id   =    \"hjoiphjfhj\">\n    // const attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\")*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n    // const startTagClose = /^\\s*(\\/?)>/;  // 匹配标签结束的 <div />\n    // const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g  // {{}}\n\n\n    console.log(template)\n\n    // render函数返回的是虚拟dom\n    return function render() {\n\n    }\n}\n\n\n\n/*\n<div id=\"app\">\n    <h1>hello</h1>\n</div>\n\n// AST抽象语法树\nlet root = {\n    tag: 'div',\n    attrs: [\n        { name: 'id', value: 'app' }\n    ],\n    parent: null,\n    type:1,\n    children: [\n        {\n            tag: 'p',\n            attrs: [],\n            parent: root,\n            type:1,\n            children: [\n                { text: 'hello', type:3 }\n            ]\n        }\n    ]\n}\n*/","import {initState} from './state'\nimport {compileToFunction} from './compiler/index.js'\n\n// 在Vue构造函数的原型上添加初始化init方法\nexport function initMixin(Vue) {\n    // 初始化流程\n    Vue.prototype._init = function(options) {\n        // console.log(this) //Vue实例\n        // 数据劫持\n        const vm = this; // vue实例\n        // this.$options = 用户传入的配置参数\n        vm.$options = options;\n\n        // 初始化状态\n        initState(vm);\n\n        // 若传入了el属性 需要将页面渲染出来 实现挂载流程\n        if(vm.$options.el) {\n            vm.$mount(vm.$options.el)\n        }\n    }\n\n    Vue.prototype.$mount = function (el) {\n        const vm = this;\n        const options = vm.$options\n        el = document.querySelector(el);\n        // console.log(el)\n\n        // 默认优先级 render, template, el\n        if(!options.render) {\n            // 对模板进行编译\n            let template = options.template\n\n            //   并且有 el\n            if(!template && el) {\n                template = el.outerHTML\n            }\n            // console.log(template, 'outerHTML')\n\n            // 将template转换成render方法 AST语法树\n            const render = compileToFunction(template);\n            options.render = render\n        }\n        // 传了render函数用传的，没传用if里面编译后的\n        // options.render\n    }\n}\n\n/*\n<div id=\"app\">\n    <h1>{{name}}</h1>\n    <h3>{{age}}</h3>\n</div>\nrender函数\nrender() {\n    return _c('div', {id:'app'}, _c('h1',undefined, _v(_s(name))), _c('h3',undefined,_v(_s())))\n}\n*/","import {initMixin} from './init'\n\nfunction Vue(options) {\n    // vue初始化操作\n    this._init(options)\n}\n\n// 通过引入文件的方式给Vue原型上添加方法\n// 导入init方法 \ninitMixin(Vue)\n\nexport default Vue"],"names":["isObject","data","def","key","value","Object","defineProperty","enumerable","configurable","oldArraryMethods","Array","prototype","arraryMethods","create","methods","forEach","console","log","args","result","apply","inserted","ob","__ob__","slice","observeArray","Observe","isArray","__proto__","walk","i","length","observe","keys","defineReactive","get","set","newValue","isObj","initState","vm","opts","$options","props","initData","computed","watch","_data","call","compileToFunction","template","render","initMixin","Vue","_init","options","el","$mount","document","querySelector","outerHTML"],"mappings":"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"}